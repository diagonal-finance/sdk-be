scalar ChainId
scalar PositiveInt
scalar URL

input CreateCheckoutSessionInput {
    cancelUrl: URL!
    successUrl: URL!

    chainIds: [ChainId!]

    customerId: String!
    packageId: String!

    expiresAt: DateTime
}

type CheckoutSession {
    id: ID!
    url: URL!
}

interface Error {
    message: String!
}

type CreateCheckoutSessionPackageNotFound implements Error {
    message: String!
}

type CreateCheckoutSessionInvalidExpiresAt implements Error {
    message: String!
}

type CreateCheckoutSessionPayload {
    checkoutSession: CheckoutSession!
}

union CreateCheckoutSessionResult =
      CreateCheckoutSessionPayload
    | CreateCheckoutSessionPackageNotFound
    | CreateCheckoutSessionInvalidExpiresAt

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

input CreatePortalSessionPackageConfig {
    packageId: String
    chainId: ChainId
}

input CreatePortalSessionConfiguration {
    availablePackages: [CreatePortalSessionPackageConfig!]
    allowedChains: [ChainId!]
}

input CreatePortalSessionInput {
    returnUrl: URL!
    configuration: CreatePortalSessionConfiguration
    customerId: String!
}

type PortalSession {
    id: ID!
    url: String!
}

type NoCustomerFoundError implements Error {
    message: String!
}

union CreatePortalSessionResult = PortalSession | NoCustomerFoundError

type Mutation {
    createCheckoutSession(
        input: CreateCheckoutSessionInput!
    ): CreateCheckoutSessionResult!
    createPortalSession(
        input: CreatePortalSessionInput!
    ): CreatePortalSessionResult!
}

type Query {
    checkoutSession(id: String!): CheckoutSession!
}

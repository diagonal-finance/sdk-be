scalar ChainId
scalar PositiveInt
scalar URL

input CheckoutSessionCreateInput {
    cancelUrl: String!
    successUrl: String!

    chainIds: [ChainId!]

    customerId: String!
    packageId: PositiveInt!

    expiresAt: DateTime
}

type CheckoutSession {
    id: String!
    url: URL!
}

interface Error {
    message: String!
}

type PackageNotFound implements Error {
    message: String!
}

type InvalidExpiresAt implements Error {
    message: String!
}

union CheckoutSessionCreateResult =
      CheckoutSession
    | PackageNotFound
    | InvalidExpiresAt

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Mutation {
    checkoutSessionCreate(
        input: CheckoutSessionCreateInput!
    ): CheckoutSessionCreateResult!
}

type Query {
    checkoutSession(id: String!): CheckoutSession!
}
